{% macro propertyType property %}{% if property.type == "DateTime" or property.type == "DateDay" or property.raw.format == "timestamp" %}Date{% else %}{{ property.type }}{% endif %}{% if property.optional or property.raw.nullable %}?{% endif %}{% endmacro %}
{% macro propertyName property %}{% if property.value|hasPrefix:"_" %}_{{ property.name }}{% else %}{{ property.name }}{% endif %}{% endmacro %}
{% if options.excludeTypes[type] == true %}
    
{% else %}
{% if description %}
/** {{ description }} */
{% endif %}
{% if enum %}
{% include "Includes/Enum.stencil" enum %}
{% elif aliasType %}
{% if type != "String" %}
public typealias {{ type }} = {{ aliasType }}
{% endif %}
{% elif additionalPropertiesType and allProperties.count == 0 %}
public typealias {{ type }} = [String: {{ additionalPropertiesType }}]
{% elif discriminatorType %}
public enum {{ type }}: {% if options.modelProtocol %}{{ options.modelProtocol }}{% else %}Codable, Equatable{% endif %} {

    {% for subType in discriminatorType.subTypes %}
    case {{ subType.name }}({{ subType.type }})
    {% endfor %}

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: PlainCodingKey.self)
        let discriminator: String = try container.decode(path: "{{ discriminatorType.discriminatorProperty }}".components(separatedBy: ".").map { PlainCodingKey($0) })
        switch discriminator {
        {% for name, subType in discriminatorType.mapping %}
        case "{{ name }}":
            self = .{{ subType.name}}(try {{ subType.type }}(from: decoder))
        {% endfor %}
        default:
            throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \"\(discriminator)\""))
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        {% for subType in discriminatorType.subTypes %}
        case .{{ subType.name}}(let content):
            try container.encode(content)
        {% endfor %}
        }
    }
    
		{% for subType in discriminatorType.subTypes %}
		public var {{ subType.name }}: {{ subType.type }}? {
			if case .{{ subType.name }}(let value) = self {
				return value
			}
			return nil
		}
		{% endfor %}
}
{% else %}
public struct {{ type }}: {% if options.modelProtocol %}{{ options.modelProtocol }}{% else %}Codable, Equatable{% endif %} {

    {% for property in allProperties %}
    {% if not property.raw.deprecated %}
    {% if property.description %}
    /** {{ property.description }} */
    {% endif %}
    public {% if options.mutableModels %}var{% else %}let{% endif %} {% call propertyName property %}: {% call propertyType property %}
    {% endif %}
    {% endfor %}
    {% if additionalPropertiesType %}

    public {% if options.mutableModels %}var{% else %}let{% endif %} additionalProperties: [String: {{ additionalPropertiesType }}] = [:]
    {% endif %}

    public enum CodingKeys: String, CodingKey {

    {% for property in allProperties %}
        {% if not property.raw.deprecated %}
        case {% call propertyName property %}{% if property.name != property.value %} = "{{ property.value }}"{% endif %}
        {% endif %}
    {% endfor %}
    }

    public init(
        {% for property in allProperties %}
        {% if not property.raw.deprecated %}
        {% call propertyName property %}: {% call propertyType property %}{% if property.optional or property.raw.nullable %} = nil{% endif %}{% ifnot forloop.last %},{% endif %}
        {% endif %}    
        {% endfor %}
    ) {
        {% for property in allProperties %}
        {% if not property.raw.deprecated %}
        self.{% call propertyName property %} = {% call propertyName property %}
        {% endif %}
        {% endfor %}
    }
    {% if additionalPropertiesType %}

    public subscript(key: String) -> {{ additionalPropertiesType }}? {
        get {
            return additionalProperties[key]
        }
        set {
            additionalProperties[key] = newValue
        }
    }
    {% endif %}
    {% for enum in enums %}
    {% if not enum.isGlobal %}

    {% filter indent:4 %}{% include "Includes/Enum.stencil" enum %}{% endfilter %}
    {% endif %}
    {% endfor %}
    {% for schema in schemas %}
    {% if options.globals[schema.type] != true %}
    {% if options.typealiases[type][schema.type] != null %}
    
    public typealias {{ schema.type }} = {{ options.typealiases[type][schema.type] }}
    {% else %}

    {% filter indent:4 %}{% include "Includes/Model.stencil" schema %}{% endfilter %}
    {% endif %}
    {% endif %}
    {% endfor %}
}
{% endif %}
{% endif %}
