formatter: swift
options:
  name: API
  fixedWidthIntegers: false # whether to use types like Int32 and Int64
  mutableModels: true # whether model properties are mutable
  safeOptionalDecoding: false # set invalid optionals to nil instead of throwing
  modelPrefix: null # applied to model classes and enums
  modelSuffix: null # applied to model classes
  modelNames: {} # override model type names
  enumNames: {} # override enum type names
  enumUndecodedCase: true # whether to add undecodable case to enums
  codableResponses: true # constrains all responses/model to be Codable
  propertyNames: {} # override property names
  anyType: JSON # override Any in generated models
  numberType: Decimal # number type without format
  groupingType: tag # how to group requests, can be path, tag or none
  excrsionCheck: false
  excludeTypes: {} # whether to exclude types from the autogenerated models, example: { Color: true }
  excludeHeaders: {} # whether to exclude headers from the autogenerated requests, example: { ContentType: true }
  dependencies:
    - name: SwiftAPIClient
      github: dankinsoid/swift-api-client
      version: 1.1.0
    - name: SwiftJSON
      github: dankinsoid/swift-json
      version: 1.1.0
templateFiles:
  - path: Sources/APIModule.swift
    destination: "{{options.name}}/{{options.name}}.swift"
  - path: Sources/Enum.swift
    context: enums
    destination: "Enums/{{ enumName }}.swift"
  - path: Sources/Model.swift
    context: schemas
    destination: "Models/{{ type }}.swift"
  - path: Sources/Request.swift
    context: operations
    destination: "{{options.name}}/Requests{% if tag %}/{{ tag|upperCamelCase }}{% endif %}/{{ type }}.swift"
copiedFiles: ["Models", "APIClient"]
